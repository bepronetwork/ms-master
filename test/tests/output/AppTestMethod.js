module.exports = {
    shouldCreateTheApp(data, expect) {
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message.id).to.not.be.null;
        expect(data.message.id).to.be.an('string');
        expect(data.message.name).to.not.be.null;
        expect(data.message.name).to.be.an('string');
        expect(data.message.description).to.not.be.null;
        expect(data.message.description).to.be.an('string');
        expect(data.message.isValid).to.not.be.null;
        expect(data.message.isValid).to.be.false;
        expect(data.message.licensesId).to.be.an('array').that.is.empty;
        expect(data.message.customization).to.not.be.null;
        expect(data.message.customization).to.be.an('string')
        expect(data.message.integrations).to.not.be.null;
        expect(data.message.integrations).to.not.be.empty;
        expect(data.message.integrations.chat).to.not.be.null;
        expect(data.message.integrations.chat).to.not.be.empty;
        expect(data.message.integrations.chat.publicKey).to.not.be.null;
        expect(data.message.countriesAvailable).to.be.an('array').that.is.empty;
        expect(data.message.games).to.be.an('array').that.is.empty;

    },
    shouldGetNewBearerToken(data, expect) {
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message).to.not.be.null;
        expect(data.message).to.be.an('object');
        expect(data.message).to.include({ username: data.message.username, email: data.message.email, name: data.message.name, id: data.message.id, app: data.message.app, security: data.message.security });
        expect(data.message.username).to.not.be.null;
        expect(data.message.username).to.be.an('string');
        expect(data.message.email).to.not.be.null;
        expect(data.message.email).to.be.an('string');
        expect(data.message.name).to.not.be.null;
        expect(data.message.name).to.be.an('string');
        expect(data.message.id).to.not.be.null;
        expect(data.message.id).to.be.an('string');
        expect(data.message.app).to.not.be.null;
        expect(data.message.app).to.be.an('object');
        expect(data.message.app).to.include({ id: data.message.app.id, name: data.message.app.name, description: data.message.app.description, bearerToken: data.message.app.bearerToken, withdraws: data.message.app.withdraws, isValid: data.message.app.isValid, services: data.message.app.services, games: data.message.app.games, wallet: data.message.app.wallet });
        expect(data.message.app.id).to.not.be.null;
        expect(data.message.app.id).to.be.an('string');
        expect(data.message.app.name).to.not.be.null;
        expect(data.message.app.name).to.be.an('string');
        expect(data.message.app.description).to.not.be.null;
        expect(data.message.app.description).to.be.an('string');
        expect(data.message.app).to.have.property('bearerToken');
        expect(data.message.app.bearerToken).to.not.be.null;
        expect(data.message.app.withdraws).to.be.an('array').that.is.empty;
        expect(data.message.app.isValid).to.not.be.null;
        expect(data.message.app.isValid).to.be.false;
        expect(data.message.app.services).to.be.an('array').that.is.empty;
        expect(data.message.app.games).to.be.an('array').that.is.empty;
        expect(data.message.app.wallet).to.not.be.null;
        expect(data.message.app.wallet).to.be.an('object');
        expect(data.message.app.wallet).to.include({ playBalance: data.message.app.wallet.playBalance });
        expect(data.message.app.wallet.playBalance).to.not.be.null;
        expect(data.message.app.wallet.playBalance).to.equal(0);
        expect(data.message.security).to.not.be.null;
        expect(data.message.security).to.be.an('object');
        expect(data.message.security).to.include({ id: data.message.security.id, bearerToken: data.message.security.bearerToken });
        expect(data.message.security.id).to.not.be.null;
        expect(data.message.security.id).to.be.an('string');
        expect(data.message.security).to.have.property('bearerToken');
        expect(data.message.security.bearerToken).to.not.be.null;
        expect(data.message.security.bearerToken).to.be.an('string');
    },
    shouldGetAppDataAuth(data, expect) {
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message).to.not.be.null;
        expect(data.message).to.be.an('object');
        expect(data.message).to.include({ id: data.message.id, name: data.message.name, description: data.message.description, bearerToken: data.message.bearerToken, ownerAddress: data.message.ownerAddress, authorizedAddresses: data.message.authorizedAddresses, croupierAddress: data.message.croupierAddress, isValid: data.message.isValid, integrations: data.message.integrations, services: data.message.services, customization: data.message.customization, withdraws: data.message.withdraws, deposits: data.message.deposits, licensesId: data.message.licensesId, countriesAvailable: data.message.countriesAvailable, games: data.message.games, affiliateSetup: data.message.affiliateSetup, wallet: data.message.wallet });
        expect(data.message.id).to.not.be.null;
        expect(data.message.id).to.be.an('string');
        expect(data.message.name).to.not.be.null;
        expect(data.message.name).to.be.an('string');
        expect(data.message.description).to.not.be.null;
        expect(data.message.description).to.be.an('string');
        expect(data.message).to.have.property('bearerToken');
        expect(data.message.bearerToken).to.not.be.null;
        expect(data.message.bearerToken).to.be.an('string');
        expect(data.message.ownerAddress).to.not.be.null;
        expect(data.message.ownerAddress).to.be.an('string');
        expect(data.message.ownerAddress).to.equal('N/A');
        expect(data.message.authorizedAddresses).to.not.be.null;
        expect(data.message.authorizedAddresses).to.be.an('array').that.is.empty;
        expect(data.message.authorizedAddresses.length).to.equal(0);
        expect(data.message.croupierAddress).to.not.be.null;
        expect(data.message.croupierAddress).to.be.an('string');
        expect(data.message.croupierAddress).to.equal('N/A');
        expect(data.message.isValid).to.not.be.null;
        expect(data.message.isValid).to.be.false;
        expect(data.message.integrations).to.not.be.null;
        expect(data.message.integrations).to.be.an('object');
        expect(data.message.integrations).to.include({ _id: data.message.integrations._id, chat: data.message.integrations.chat });
        expect(data.message.integrations._id).to.not.be.null;
        expect(data.message.integrations._id).to.be.an('string');
        expect(data.message.integrations.chat).to.not.be.null;
        expect(data.message.integrations.chat).to.be.an('object');
        expect(data.message.integrations.chat).to.include({ isActive: data.message.integrations.chat.isActive, name: data.message.integrations.chat.name, metaName: data.message.integrations.chat.metaName, link: data.message.integrations.chat.link, _id: data.message.integrations.chat._id, privateKey: data.message.integrations.chat.privateKey, publicKey: data.message.integrations.chat.publicKey });
        expect(data.message.integrations.chat.isActive).to.not.be.null;
        expect(data.message.integrations.chat.isActive).to.be.true;
        expect(data.message.integrations.chat.name).to.not.be.null;
        expect(data.message.integrations.chat.name).to.be.an('string');
        expect(data.message.integrations.chat.metaName).to.not.be.null;
        expect(data.message.integrations.chat.metaName).to.be.an('string');
        expect(data.message.integrations.chat.link).to.not.be.null;
        expect(data.message.integrations.chat.link).to.be.an('string');
        expect(data.message.integrations.chat._id).to.not.be.null;
        expect(data.message.integrations.chat._id).to.be.an('string');
        expect(data.message.integrations.chat.privateKey).to.not.be.null;
        expect(data.message.integrations.chat.privateKey).to.be.an('string');
        expect(data.message.integrations.chat.publicKey).to.not.be.null;
        expect(data.message.integrations.chat.publicKey).to.be.an('string');
        expect(data.message.services).to.not.be.null;
        expect(data.message.services).to.be.an('array').that.is.empty;
        expect(data.message.customization).to.not.be.null;
        expect(data.message.customization).to.be.an('object');
        expect(data.message.customization).to.include({ _id: data.message.customization._id, topBar: data.message.customization.topBar, banners: data.message.customization.banners });
        expect(data.message.customization._id).to.not.be.null;
        expect(data.message.customization._id).to.be.an('string');
        expect(data.message.customization.topBar).to.not.be.null;
        expect(data.message.customization.topBar).to.be.an('object');
        expect(data.message.customization.topBar).to.include({ isActive: data.message.customization.topBar.isActive, _id: data.message.customization.topBar._id });
        expect(data.message.customization.topBar.isActive).to.not.be.null;
        expect(data.message.customization.topBar.isActive).to.be.false;
        expect(data.message.customization.topBar._id).to.not.be.null;
        expect(data.message.customization.topBar._id).to.be.an('string');
        expect(data.message.customization.banners).to.not.be.null;
        expect(data.message.customization.banners).to.be.an('object');
        expect(data.message.customization.banners).to.include({ ids: data.message.customization.banners.ids, autoDisplay: data.message.customization.banners.autoDisplay, _id: data.message.customization.banners._id });
        expect(data.message.customization.banners.ids).to.not.be.null;
        expect(data.message.customization.banners.ids).to.be.an('array').that.is.empty;
        expect(data.message.customization.banners.autoDisplay).to.not.be.null;
        expect(data.message.customization.banners.autoDisplay).to.be.false;
        expect(data.message.customization.banners._id).to.not.be.null;
        expect(data.message.customization.banners._id).to.be.an('string');
        expect(data.message.withdraws).to.not.be.null;
        expect(data.message.withdraws).to.be.an('array').that.is.empty;
        expect(data.message.deposits).to.not.be.null;
        expect(data.message.deposits).to.be.an('array').that.is.empty;
        expect(data.message.licensesId).to.not.be.null;
        expect(data.message.licensesId).to.be.an('array').that.is.empty;
        expect(data.message.countriesAvailable).to.not.be.null;
        expect(data.message.countriesAvailable).to.be.an('array').that.is.empty;
        expect(data.message.games).to.not.be.null;
        expect(data.message.games).to.be.an('array').that.is.empty;
        expect(data.message.affiliateSetup).to.not.be.null;
        expect(data.message.affiliateSetup).to.be.an('object');
        expect(data.message.affiliateSetup).to.include({ isActive: data.message.affiliateSetup.isActive, affiliateStructures: data.message.affiliateSetup.affiliateStructures, _id: data.message.affiliateSetup._id, });
        expect(data.message.affiliateSetup.isActive).to.not.be.null;
        expect(data.message.affiliateSetup.isActive).to.be.true;
        expect(data.message.affiliateSetup.affiliateStructures).to.not.be.null;
        expect(data.message.affiliateSetup.affiliateStructures).to.be.an('array');
        expect(data.message.affiliateSetup.affiliateStructures.isActive).to.not.be.null;
        expect(data.message.affiliateSetup.affiliateStructures._id).to.not.be.null;
        expect(data.message.affiliateSetup.affiliateStructures.level).to.not.be.null;
        expect(data.message.affiliateSetup.affiliateStructures.percentageOnLoss).to.not.be.null;
        expect(data.message.affiliateSetup._id).to.not.be.null;
        expect(data.message.affiliateSetup._id).to.be.an('String');
        expect(data.message.wallet).to.not.be.null;
        expect(data.message.wallet).to.be.an('object');
        expect(data.message.wallet).to.include({ playBalance: data.message.wallet.playBalance });
        expect(data.message.wallet.playBalance).to.not.be.null;
        expect(data.message.wallet.playBalance).to.be.an('number');
    },
    shouldGetAppData(data, expect) {
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message).to.not.be.null;
        expect(data.message).to.be.an('object');
        expect(data.message).to.include({ id: data.message.id, name: data.message.name, description: data.message.description, isValid: data.message.isValid, licensesId: data.message.licensesId, customization: data.message.customization, integrations: data.message.integrations, countriesAvailable: data.message.countriesAvailable, integrations: data.message.integrations, games: data.message.games });
        expect(data.message.id).to.not.be.null;
        expect(data.message.id).to.be.an('string');
        expect(data.message.name).to.not.be.null;
        expect(data.message.name).to.be.an('string');
        expect(data.message.description).to.not.be.null;
        expect(data.message.description).to.be.an('string');
        expect(data.message.isValid).to.not.be.null;
        expect(data.message.isValid).to.be.false;
        expect(data.message.licensesId).to.not.be.null;
        expect(data.message.licensesId).to.be.an('array').that.is.empty;
        expect(data.message.customization).to.not.be.null;
        expect(data.message.customization).to.be.an('object');
        expect(data.message.customization).to.include({ _id: data.message.customization._id, topBar: data.message.customization.topBar, banners: data.message.customization.banners });
        expect(data.message.customization._id).to.not.be.null;
        expect(data.message.customization._id).to.be.an('string');
        expect(data.message.customization.topBar).to.not.be.null;
        expect(data.message.customization.topBar).to.be.an('object');
        expect(data.message.customization.topBar).to.include({ isActive: data.message.customization.topBar.isActive, _id: data.message.customization.topBar._id });
        expect(data.message.customization.topBar.isActive).to.not.be.null;
        expect(data.message.customization.topBar.isActive).to.be.false;
        expect(data.message.customization.topBar._id).to.not.be.null;
        expect(data.message.customization.topBar._id).to.be.an('string');
        expect(data.message.customization.banners).to.not.be.null;
        expect(data.message.customization.banners).to.be.an('object');
        expect(data.message.customization.banners).to.include({ ids: data.message.customization.banners.ids, autoDisplay: data.message.customization.banners.autoDisplay, _id: data.message.customization.banners._id });
        expect(data.message.customization.banners.ids).to.not.be.null;
        expect(data.message.customization.banners.ids).to.be.an('array').that.is.empty;
        expect(data.message.customization.banners.autoDisplay).to.not.be.null;
        expect(data.message.customization.banners.autoDisplay).to.be.false;
        expect(data.message.customization.banners._id).to.not.be.null;
        expect(data.message.customization.banners._id).to.be.an('string');
        expect(data.message.integrations).to.not.be.null;
        expect(data.message.integrations).to.be.an('object');
        expect(data.message.integrations).to.include({ chat: data.message.integrations.chat });
        expect(data.message.integrations.chat).to.not.be.null;
        expect(data.message.integrations.chat).to.be.an('object');
        expect(data.message.integrations.chat).to.include({ publicKey: data.message.integrations.chat.publicKey });
        expect(data.message.integrations.chat.publicKey).to.not.be.null;
        expect(data.message.integrations.chat.publicKey).to.be.an('string');
        expect(data.message.countriesAvailable).to.not.be.null;
        expect(data.message.countriesAvailable).to.be.an('array').that.is.empty;
        expect(data.message.games).to.not.be.null;
        expect(data.message.games).to.be.an('array').that.is.empty;
        
    },
    shouldIntegrateServicesIntoApp(data, expect){
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
    },
    ethShouldDeployThePlatformSmartContract(res_deploy, expect){
        expect(res_deploy).to.not.equal(false);
        expect(res_deploy.platformTokenAddress).to.not.be.null;
        expect(res_deploy.platformTokenAddress).to.be.an('string');
        expect(res_deploy.transactionHash).to.not.be.null;
        expect(res_deploy.transactionHash).to.be.an('string');
        expect(res_deploy.platformAddress).to.not.be.null;
        expect(res_deploy.platformAddress).to.be.an('string');
        expect(res_deploy.platformBlockchain).to.not.be.null;
        expect(res_deploy.platformBlockchain).to.be.an('string');
        expect(res_deploy.casinoContract).to.not.be.null;
        expect(res_deploy.casinoContract).to.be.an('object');
    },
    shouldAddBlockchainInformationToApp(data,expect){
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message).to.not.be.null;
        expect(data.message).to.be.an('object');
        expect(data.message).to.include({ id: data.message.id, name: data.message.name, description: data.message.description, bearerToken: data.message.bearerToken, ownerAddress: data.message.ownerAddress, authorizedAddresses: data.message.authorizedAddresses, croupierAddress: data.message.croupierAddress, isValid: data.message.isValid, currencyTicker: data.message.currencyTicker, decimals: data.message.decimals, integrations: data.message.integrations, services: data.message.services, customization: data.message.customization, withdraws: data.message.withdraws, deposits: data.message.deposits, platformAddress: data.message.platformAddress, platformBlockchain: data.message.platformBlockchain, platformTokenAddress: data.message.platformTokenAddress, licensesId: data.message.licensesId, countriesAvailable: data.message.countriesAvailable, games: data.message.games, affiliateSetup: data.message.affiliateSetup, wallet: data.message.wallet });
        expect(data.message.id).to.not.be.null;
        expect(data.message.id).to.be.an('string');
        expect(data.message.name).to.not.be.null;
        expect(data.message.name).to.be.an('string');
        expect(data.message.description).to.not.be.null;
        expect(data.message.description).to.be.an('string');
        expect(data.message).to.have.property('bearerToken');
        expect(data.message.bearerToken).to.not.be.null;
        expect(data.message.bearerToken).to.be.an('string');
        expect(data.message.ownerAddress).to.not.be.null;
        expect(data.message.ownerAddress).to.be.an('string');
        expect(data.message.authorizedAddresses).to.not.be.null;
        expect(data.message.authorizedAddresses).to.be.an('array').that.not.is.empty;
        expect(data.message.authorizedAddresses.length).to.equal(1);
        expect(data.message.croupierAddress).to.not.be.null;
        expect(data.message.croupierAddress).to.be.an('string');
        expect(data.message.isValid).to.not.be.null;
        expect(data.message.isValid).to.be.false;
        expect(data.message.currencyTicker).to.not.be.null;
        expect(data.message.currencyTicker).to.be.an('string');
        expect(data.message.decimals).to.not.be.null;
        expect(data.message.decimals).to.be.an('number');
        expect(data.message.integrations).to.not.be.null;
        expect(data.message.integrations).to.be.an('object');
        expect(data.message.integrations).to.include({ _id: data.message.integrations._id, chat: data.message.integrations.chat });
        expect(data.message.integrations._id).to.not.be.null;
        expect(data.message.integrations._id).to.be.an('string');
        expect(data.message.integrations.chat).to.not.be.null;
        expect(data.message.integrations.chat).to.be.an('object');
        expect(data.message.integrations.chat).to.include({ isActive: data.message.integrations.chat.isActive, name: data.message.integrations.chat.name, metaName: data.message.integrations.chat.metaName, link: data.message.integrations.chat.link, _id: data.message.integrations.chat._id, privateKey: data.message.integrations.chat.privateKey, publicKey: data.message.integrations.chat.publicKey });
        expect(data.message.integrations.chat.isActive).to.not.be.null;
        expect(data.message.integrations.chat.isActive).to.be.true;
        expect(data.message.integrations.chat.name).to.not.be.null;
        expect(data.message.integrations.chat.name).to.be.an('string');
        expect(data.message.integrations.chat.metaName).to.not.be.null;
        expect(data.message.integrations.chat.metaName).to.be.an('string');
        expect(data.message.integrations.chat.link).to.not.be.null;
        expect(data.message.integrations.chat.link).to.be.an('string');
        expect(data.message.integrations.chat._id).to.not.be.null;
        expect(data.message.integrations.chat._id).to.be.an('string');
        expect(data.message.integrations.chat.privateKey).to.not.be.null;
        expect(data.message.integrations.chat.privateKey).to.be.an('string');
        expect(data.message.integrations.chat.publicKey).to.not.be.null;
        expect(data.message.integrations.chat.publicKey).to.be.an('string');
        expect(data.message.services).to.not.be.null;
        expect(data.message.services).to.be.an('array').that.not.is.empty;
        expect(data.message.services.length).to.equal(2);
        expect(data.message.customization).to.not.be.null;
        expect(data.message.customization).to.be.an('object');
        expect(data.message.customization).to.include({ _id: data.message.customization._id, topBar: data.message.customization.topBar, banners: data.message.customization.banners });
        expect(data.message.customization._id).to.not.be.null;
        expect(data.message.customization._id).to.be.an('string');
        expect(data.message.customization.topBar).to.not.be.null;
        expect(data.message.customization.topBar).to.be.an('object');
        expect(data.message.customization.topBar).to.include({ isActive: data.message.customization.topBar.isActive, _id: data.message.customization.topBar._id });
        expect(data.message.customization.topBar.isActive).to.not.be.null;
        expect(data.message.customization.topBar.isActive).to.be.false;
        expect(data.message.customization.topBar._id).to.not.be.null;
        expect(data.message.customization.topBar._id).to.be.an('string');
        expect(data.message.customization.banners).to.not.be.null;
        expect(data.message.customization.banners).to.be.an('object');
        expect(data.message.customization.banners).to.include({ ids: data.message.customization.banners.ids, autoDisplay: data.message.customization.banners.autoDisplay, _id: data.message.customization.banners._id });
        expect(data.message.customization.banners.ids).to.not.be.null;
        expect(data.message.customization.banners.ids).to.be.an('array').that.is.empty;
        expect(data.message.customization.banners.autoDisplay).to.not.be.null;
        expect(data.message.customization.banners.autoDisplay).to.be.false;
        expect(data.message.customization.banners._id).to.not.be.null;
        expect(data.message.customization.banners._id).to.be.an('string');
        expect(data.message.withdraws).to.not.be.null;
        expect(data.message.withdraws).to.be.an('array').that.is.empty;
        expect(data.message.deposits).to.not.be.null;
        expect(data.message.deposits).to.be.an('array').that.is.empty;
        expect(data.message.platformAddress).to.not.be.null;
        expect(data.message.platformAddress).to.be.an('string');
        expect(data.message.platformBlockchain).to.not.be.null;
        expect(data.message.platformBlockchain).to.be.an('string');
        expect(data.message.platformTokenAddress).to.not.be.null;
        expect(data.message.platformTokenAddress).to.be.an('string');
        expect(data.message.licensesId).to.not.be.null;
        expect(data.message.licensesId).to.be.an('array').that.is.empty;
        expect(data.message.countriesAvailable).to.not.be.null;
        expect(data.message.countriesAvailable).to.be.an('array').that.is.empty;
        expect(data.message.games).to.not.be.null;
        expect(data.message.games).to.be.an('array').that.is.empty;
        expect(data.message.affiliateSetup).to.not.be.null;
        expect(data.message.affiliateSetup).to.be.an('object');
        expect(data.message.affiliateSetup).to.include({ isActive: data.message.affiliateSetup.isActive, affiliateStructures: data.message.affiliateSetup.affiliateStructures, _id: data.message.affiliateSetup._id, });
        expect(data.message.affiliateSetup.isActive).to.not.be.null;
        expect(data.message.affiliateSetup.isActive).to.be.true;
        expect(data.message.affiliateSetup.affiliateStructures).to.not.be.null;
        expect(data.message.affiliateSetup.affiliateStructures).to.be.an('array');
        expect(data.message.affiliateSetup.affiliateStructures.isActive).to.not.be.null;
        expect(data.message.affiliateSetup.affiliateStructures._id).to.not.be.null;
        expect(data.message.affiliateSetup.affiliateStructures.level).to.not.be.null;
        expect(data.message.affiliateSetup.affiliateStructures.percentageOnLoss).to.not.be.null;
        expect(data.message.affiliateSetup._id).to.not.be.null;
        expect(data.message.affiliateSetup._id).to.be.an('String');
        expect(data.message.wallet).to.not.be.null;
        expect(data.message.wallet).to.be.an('object');
        expect(data.message.wallet).to.include({ playBalance: data.message.wallet.playBalance });
        expect(data.message.wallet.playBalance).to.not.be.null;
        expect(data.message.wallet.playBalance).to.be.an('number');
    },
    shouldAddSomeBlockhainInformationToApp(data,expect){
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message).to.not.be.null;
        expect(data.message).to.be.an('object');
        expect(data.message).to.include({ id: data.message.id, name: data.message.name, description: data.message.description, bearerToken: data.message.bearerToken, ownerAddress: data.message.ownerAddress, authorizedAddresses: data.message.authorizedAddresses, croupierAddress: data.message.croupierAddress, isValid: data.message.isValid, currencyTicker: data.message.currencyTicker, decimals: data.message.decimals, integrations: data.message.integrations, services: data.message.services, customization: data.message.customization, withdraws: data.message.withdraws, deposits: data.message.deposits, platformAddress: data.message.platformAddress, platformBlockchain: data.message.platformBlockchain, platformTokenAddress: data.message.platformTokenAddress, licensesId: data.message.licensesId, countriesAvailable: data.message.countriesAvailable, games: data.message.games, affiliateSetup: data.message.affiliateSetup, wallet: data.message.wallet });
        expect(data.message.id).to.not.be.null;
        expect(data.message.id).to.be.an('string');
        expect(data.message.name).to.not.be.null;
        expect(data.message.name).to.be.an('string');
        expect(data.message.description).to.not.be.null;
        expect(data.message.description).to.be.an('string');
        expect(data.message).to.have.property('bearerToken');
        expect(data.message.bearerToken).to.not.be.null;
        expect(data.message.bearerToken).to.be.an('string');
        expect(data.message.ownerAddress).to.not.be.null;
        expect(data.message.ownerAddress).to.be.an('string');
        expect(data.message.authorizedAddresses).to.not.be.null;
        expect(data.message.authorizedAddresses).to.be.an('array').that.not.is.empty;
        expect(data.message.authorizedAddresses.length).to.equal(2);
        expect(data.message.croupierAddress).to.not.be.null;
        expect(data.message.croupierAddress).to.be.an('string');
        expect(data.message.isValid).to.not.be.null;
        expect(data.message.isValid).to.be.false;
        expect(data.message.currencyTicker).to.not.be.null;
        expect(data.message.currencyTicker).to.be.an('string');
        expect(data.message.decimals).to.not.be.null;
        expect(data.message.decimals).to.be.an('number');
        expect(data.message.integrations).to.not.be.null;
        expect(data.message.integrations).to.be.an('object');
        expect(data.message.integrations).to.include({ _id: data.message.integrations._id, chat: data.message.integrations.chat });
        expect(data.message.integrations._id).to.not.be.null;
        expect(data.message.integrations._id).to.be.an('string');
        expect(data.message.integrations.chat).to.not.be.null;
        expect(data.message.integrations.chat).to.be.an('object');
        expect(data.message.integrations.chat).to.include({ isActive: data.message.integrations.chat.isActive, name: data.message.integrations.chat.name, metaName: data.message.integrations.chat.metaName, link: data.message.integrations.chat.link, _id: data.message.integrations.chat._id, privateKey: data.message.integrations.chat.privateKey, publicKey: data.message.integrations.chat.publicKey });
        expect(data.message.integrations.chat.isActive).to.not.be.null;
        expect(data.message.integrations.chat.isActive).to.be.true;
        expect(data.message.integrations.chat.name).to.not.be.null;
        expect(data.message.integrations.chat.name).to.be.an('string');
        expect(data.message.integrations.chat.metaName).to.not.be.null;
        expect(data.message.integrations.chat.metaName).to.be.an('string');
        expect(data.message.integrations.chat.link).to.not.be.null;
        expect(data.message.integrations.chat.link).to.be.an('string');
        expect(data.message.integrations.chat._id).to.not.be.null;
        expect(data.message.integrations.chat._id).to.be.an('string');
        expect(data.message.integrations.chat.privateKey).to.not.be.null;
        expect(data.message.integrations.chat.privateKey).to.be.an('string');
        expect(data.message.integrations.chat.publicKey).to.not.be.null;
        expect(data.message.integrations.chat.publicKey).to.be.an('string');
        expect(data.message.services).to.not.be.null;
        expect(data.message.services).to.be.an('array').that.not.is.empty;
        expect(data.message.services.length).to.equal(2);
        expect(data.message.customization).to.not.be.null;
        expect(data.message.customization).to.be.an('object');
        expect(data.message.customization).to.include({ _id: data.message.customization._id, topBar: data.message.customization.topBar, banners: data.message.customization.banners });
        expect(data.message.customization._id).to.not.be.null;
        expect(data.message.customization._id).to.be.an('string');
        expect(data.message.customization.topBar).to.not.be.null;
        expect(data.message.customization.topBar).to.be.an('object');
        expect(data.message.customization.topBar).to.include({ isActive: data.message.customization.topBar.isActive, _id: data.message.customization.topBar._id });
        expect(data.message.customization.topBar.isActive).to.not.be.null;
        expect(data.message.customization.topBar.isActive).to.be.false;
        expect(data.message.customization.topBar._id).to.not.be.null;
        expect(data.message.customization.topBar._id).to.be.an('string');
        expect(data.message.customization.banners).to.not.be.null;
        expect(data.message.customization.banners).to.be.an('object');
        expect(data.message.customization.banners).to.include({ ids: data.message.customization.banners.ids, autoDisplay: data.message.customization.banners.autoDisplay, _id: data.message.customization.banners._id });
        expect(data.message.customization.banners.ids).to.not.be.null;
        expect(data.message.customization.banners.ids).to.be.an('array').that.is.empty;
        expect(data.message.customization.banners.autoDisplay).to.not.be.null;
        expect(data.message.customization.banners.autoDisplay).to.be.false;
        expect(data.message.customization.banners._id).to.not.be.null;
        expect(data.message.customization.banners._id).to.be.an('string');
        expect(data.message.withdraws).to.not.be.null;
        expect(data.message.withdraws).to.be.an('array').that.is.empty;
        expect(data.message.deposits).to.not.be.null;
        expect(data.message.deposits).to.be.an('array').that.is.empty;
        expect(data.message.platformAddress).to.not.be.null;
        expect(data.message.platformAddress).to.be.an('string');
        expect(data.message.platformBlockchain).to.not.be.null;
        expect(data.message.platformBlockchain).to.be.an('string');
        expect(data.message.platformTokenAddress).to.not.be.null;
        expect(data.message.platformTokenAddress).to.be.an('string');
        expect(data.message.licensesId).to.not.be.null;
        expect(data.message.licensesId).to.be.an('array').that.is.empty;
        expect(data.message.countriesAvailable).to.not.be.null;
        expect(data.message.countriesAvailable).to.be.an('array').that.is.empty;
        expect(data.message.games).to.not.be.null;
        expect(data.message.games).to.be.an('array').that.is.empty;
        expect(data.message.affiliateSetup).to.not.be.null;
        expect(data.message.affiliateSetup).to.be.an('object');
        expect(data.message.affiliateSetup).to.include({ isActive: data.message.affiliateSetup.isActive, affiliateStructures: data.message.affiliateSetup.affiliateStructures, _id: data.message.affiliateSetup._id, });
        expect(data.message.affiliateSetup.isActive).to.not.be.null;
        expect(data.message.affiliateSetup.isActive).to.be.true;
        expect(data.message.affiliateSetup.affiliateStructures).to.not.be.null;
        expect(data.message.affiliateSetup.affiliateStructures).to.be.an('array');
        expect(data.message.affiliateSetup.affiliateStructures.isActive).to.not.be.null;
        expect(data.message.affiliateSetup.affiliateStructures._id).to.not.be.null;
        expect(data.message.affiliateSetup.affiliateStructures.level).to.not.be.null;
        expect(data.message.affiliateSetup.affiliateStructures.percentageOnLoss).to.not.be.null;
        expect(data.message.affiliateSetup._id).to.not.be.null;
        expect(data.message.affiliateSetup._id).to.be.an('String');
        expect(data.message.wallet).to.not.be.null;
        expect(data.message.wallet).to.be.an('object');
        expect(data.message.wallet).to.include({ playBalance: data.message.wallet.playBalance });
        expect(data.message.wallet.playBalance).to.not.be.null;
        expect(data.message.wallet.playBalance).to.be.an('number');
    },
    shouldntUpdateWalletWithPendingTransaction(data,expect){
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(10);
        expect(data.message).to.not.be.null;
        expect(data.message).to.be.an('string');
    },
    shouldUpdateWalletWithVerifiedTransaction(data,expect){
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message.app).to.not.be.null;
        expect(data.message.app).to.be.an('object');
        expect(data.message.app.isValid).to.not.be.null;
        expect(data.message.app.isValid).to.be.false;
        expect(data.message.app.ownerAddress).to.not.be.null;
        expect(data.message.app.ownerAddress).to.be.an('string');
        expect(data.message.app.authorizedAddresses).to.not.be.null;
        expect(data.message.app.authorizedAddresses).to.be.an('array').that.not.is.empty;
        expect(data.message.app.authorizedAddresses.length).to.equal(2);
        expect(data.message.app.croupierAddress).to.not.be.null;
        expect(data.message.app.croupierAddress).to.be.an('string');
        expect(data.message.app.games).to.not.be.null;
        expect(data.message.app.games).to.be.an('array').that.is.empty;
        expect(data.message.app.listAdmins).to.not.be.null;
        expect(data.message.app.listAdmins).to.be.an('array').that.not.is.empty;
        expect(data.message.app.listAdmins.length).to.equal(1);
        expect(data.message.app.services).to.not.be.null;
        expect(data.message.app.services).to.be.an('array').that.not.is.empty;
        expect(data.message.app.services.length).to.equal(2);
        expect(data.message.app.users).to.not.be.null;
        expect(data.message.app.users).to.be.an('array').that.not.is.empty;
        expect(data.message.app.external_users).to.not.be.null;
        expect(data.message.app.external_users).to.be.an('array').that.not.is.empty;
        expect(data.message.app.withdraws).to.not.be.null;
        expect(data.message.app.withdraws).to.be.an('array').that.is.empty;
        expect(data.message.app.deposits).to.not.be.null;
        expect(data.message.app.deposits).to.be.an('array').that.is.empty;
        expect(data.message.app.licensesId).to.not.be.null;
        expect(data.message.app.licensesId).to.be.an('array').that.is.empty;
        expect(data.message.app.countriesAvailable).to.not.be.null;
        expect(data.message.app.countriesAvailable).to.be.an('array').that.is.empty;
        expect(data.message.app.isWithdrawing).to.not.be.null;
        expect(data.message.app.isWithdrawing).to.be.true;
        expect(data.message.app._id).to.not.be.null;
        expect(data.message.app._id).to.be.an('string');
        expect(data.message.app.wallet).to.not.be.null;
        expect(data.message.app.wallet).to.be.an('object');
        expect(data.message.app.wallet).to.include({ playBalance: data.message.app.wallet.playBalance, _id: data.message.app.wallet._id });
        expect(data.message.app.wallet.playBalance).to.not.be.null;
        expect(data.message.app.wallet.playBalance).to.be.an('number');
        expect(data.message.app.wallet._id).to.not.be.null;
        expect(data.message.app.wallet._id).to.be.an('string');
        expect(data.message.app.name).to.not.be.null;
        expect(data.message.app.name).to.be.an('string');
        expect(data.message.app.affiliateSetup).to.not.be.null;
        expect(data.message.app.affiliateSetup).to.be.an('object');
        expect(data.message.app.affiliateSetup).to.include({ isActive: data.message.app.affiliateSetup.isActive, affiliateStructures: data.message.app.affiliateSetup.affiliateStructures, _id: data.message.app.affiliateSetup._id });
        expect(data.message.app.affiliateSetup.isActive).to.not.be.null;
        expect(data.message.app.affiliateSetup.isActive).to.be.true;
        expect(data.message.app.affiliateSetup.affiliateStructures).to.not.be.null;
        expect(data.message.app.affiliateSetup.affiliateStructures).to.be.an('array');
        expect(data.message.app.affiliateSetup.affiliateStructures.isActive).to.not.be.null;
        expect(data.message.app.affiliateSetup.affiliateStructures._id).to.not.be.null;
        expect(data.message.app.affiliateSetup.affiliateStructures.level).to.not.be.null;
        expect(data.message.app.affiliateSetup.affiliateStructures.percentageOnLoss).to.not.be.null;
        expect(data.message.app.affiliateSetup._id).to.not.be.null;
        expect(data.message.app.affiliateSetup._id).to.be.an('String');
        expect(data.message.app.customization).to.not.be.null;
        expect(data.message.app.customization).to.be.an('object');
        expect(data.message.app.customization).to.include({ _id: data.message.app.customization._id, topBar: data.message.app.customization.topBar, banners: data.message.app.customization.banners });
        expect(data.message.app.customization._id).to.not.be.null;
        expect(data.message.app.customization._id).to.be.an('string');
        expect(data.message.app.customization.topBar).to.not.be.null;
        expect(data.message.app.customization.topBar).to.be.an('object');
        expect(data.message.app.customization.topBar).to.include({ isActive: data.message.app.customization.topBar.isActive, _id: data.message.app.customization.topBar._id });
        expect(data.message.app.customization.topBar.isActive).to.not.be.null;
        expect(data.message.app.customization.topBar.isActive).to.be.false;
        expect(data.message.app.customization.topBar._id).to.not.be.null;
        expect(data.message.app.customization.topBar._id).to.be.an('string');
        expect(data.message.app.customization.banners).to.not.be.null;
        expect(data.message.app.customization.banners).to.be.an('object');
        expect(data.message.app.customization.banners).to.include({ ids: data.message.app.customization.banners.ids, autoDisplay: data.message.app.customization.banners.autoDisplay, _id: data.message.app.customization.banners._id });
        expect(data.message.app.customization.banners.ids).to.not.be.null;
        expect(data.message.app.customization.banners.ids).to.be.an('array').that.is.empty;
        expect(data.message.app.customization.banners.autoDisplay).to.not.be.null;
        expect(data.message.app.customization.banners.autoDisplay).to.be.false;
        expect(data.message.app.customization.banners._id).to.not.be.null;
        expect(data.message.app.customization.banners._id).to.be.an('string');
        expect(data.message.app.integrations).to.not.be.null;
        expect(data.message.app.integrations).to.be.an('object');
        expect(data.message.app.integrations).to.include({ _id: data.message.app.integrations._id, chat: data.message.app.integrations.chat });
        expect(data.message.app.integrations._id).to.not.be.null;
        expect(data.message.app.integrations._id).to.be.an('string');
        expect(data.message.app.integrations.chat).to.not.be.null;
        expect(data.message.app.integrations.chat).to.be.an('object');
        expect(data.message.app.integrations.chat).to.include({ isActive: data.message.app.integrations.chat.isActive, name: data.message.app.integrations.chat.name, metaName: data.message.app.integrations.chat.metaName, link: data.message.app.integrations.chat.link, _id: data.message.app.integrations.chat._id, privateKey: data.message.app.integrations.chat.privateKey, publicKey: data.message.app.integrations.chat.publicKey });
        expect(data.message.app.integrations.chat.isActive).to.not.be.null;
        expect(data.message.app.integrations.chat.isActive).to.be.true;
        expect(data.message.app.integrations.chat.name).to.not.be.null;
        expect(data.message.app.integrations.chat.name).to.be.an('string');
        expect(data.message.app.integrations.chat.metaName).to.not.be.null;
        expect(data.message.app.integrations.chat.metaName).to.be.an('string');
        expect(data.message.app.integrations.chat.link).to.not.be.null;
        expect(data.message.app.integrations.chat.link).to.be.an('string');
        expect(data.message.app.integrations.chat._id).to.not.be.null;
        expect(data.message.app.integrations.chat._id).to.be.an('string');
        expect(data.message.app.integrations.chat.privateKey).to.not.be.null;
        expect(data.message.app.integrations.chat.privateKey).to.be.an('string');
        expect(data.message.app.integrations.chat.publicKey).to.not.be.null;
        expect(data.message.app.integrations.chat.publicKey).to.be.an('string');
        expect(data.message.app.description).to.not.be.null;
        expect(data.message.app.description).to.be.an('string');
        expect(data.message.app.__v).to.not.be.null;
        expect(data.message.app.__v).to.be.an('number');
        expect(data.message.app).to.have.property('bearerToken');
        expect(data.message.app.bearerToken).to.not.be.null;
        expect(data.message.app.bearerToken).to.be.an('string');
        expect(data.message.app.currencyTicker).to.not.be.null;
        expect(data.message.app.currencyTicker).to.be.an('string');
        expect(data.message.app.decimals).to.not.be.null;
        expect(data.message.app.decimals).to.be.an('number');
        expect(data.message.app.platformAddress).to.not.be.null;
        expect(data.message.app.platformAddress).to.be.an('string');
        expect(data.message.app.platformBlockchain).to.not.be.null;
        expect(data.message.app.platformBlockchain).to.be.an('string');
        expect(data.message.app.platformTokenAddress).to.not.be.null;
        expect(data.message.app.platformTokenAddress).to.be.an('string');
        expect(data.message).to.not.be.null;
        expect(data.message).to.be.an('object');
        expect(data.message.app_id).to.not.be.null;
        expect(data.message.app_id).to.be.an('string');
        expect(data.message.wallet).to.not.be.null;
        expect(data.message.wallet).to.be.an('object');
        expect(data.message.wallet).to.include({ playBalance: data.message.app.wallet.playBalance, _id: data.message.app.wallet._id });
        expect(data.message.wallet.playBalance).to.not.be.null;
        expect(data.message.wallet.playBalance).to.be.an('number');
        expect(data.message.wallet._id).to.not.be.null;
        expect(data.message.wallet._id).to.be.an('string');
        expect(data.message.creationDate).to.not.be.null;
        expect(data.message.creationDate).to.be.an('string');
        expect(data.message.transactionHash).to.not.be.null;
        expect(data.message.transactionHash).to.be.an('string');
        expect(data.message.from).to.not.be.null;
        expect(data.message.from).to.be.an('string');
        expect(data.message.currencyTicker).to.not.be.null;
        expect(data.message.currencyTicker).to.be.an('string');
        expect(data.message.amount).to.not.be.null;
        expect(data.message.amount).to.be.an('number');
        expect(data.message.wasAlreadyAdded).to.not.be.null;
        expect(data.message.wasAlreadyAdded).to.be.false;
        expect(data.message.isValid).to.not.be.null;
        expect(data.message.isValid).to.be.true;
    },
    shouldUpdateTheIntegrationInfoFromApp(data,expect){
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message).to.not.be.null;
        expect(data.message).to.be.an('object');
        expect(data.message.app).to.not.be.null;
        expect(data.message.app).to.be.an('string');
        expect(data.message.isActive).to.not.be.null;
        expect(data.message.isActive).to.be.true;
        expect(data.message.integration_id).to.not.be.null;
        expect(data.message.integration_id).to.be.an('string');
        expect(data.message.publicKey).to.not.be.null;
        expect(data.message.publicKey).to.be.an('string');
        expect(data.message.privateKey).to.not.be.null;
        expect(data.message.privateKey).to.be.an('string');
        expect(data.message.integration_type).to.not.be.null;
        expect(data.message.integration_type).to.be.an('string');
    },
    shouldGetAllEcosystemGamesEuropeanRoulette(data,expect){
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message).to.not.be.null;
        expect(data.message).to.be.an('array');
    },
    shouldAddEcosystemGameEuropeanRoulette(data,expect){
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message.gameEcosystem).to.not.be.null;
        expect(data.message.gameEcosystem).to.be.an('object');
        expect(data.message.gameEcosystem.resultSpace).to.not.be.null;
        expect(data.message.gameEcosystem.resultSpace).to.be.an('array');
        expect(data.message.gameEcosystem.isValid).to.not.be.null;
        expect(data.message.gameEcosystem.isValid).to.be.true;
        expect(data.message.gameEcosystem._id).to.not.be.null;
        expect(data.message.gameEcosystem._id).to.be.an('string');
        expect(data.message.gameEcosystem.name).to.not.be.null;
        expect(data.message.gameEcosystem.name).to.be.an('string');
        expect(data.message.gameEcosystem.metaName).to.not.be.null;
        expect(data.message.gameEcosystem.metaName).to.be.an('string');
        expect(data.message.gameEcosystem.description).to.not.be.null;
        expect(data.message.gameEcosystem.description).to.be.an('string');
        expect(data.message.gameEcosystem.image_url).to.not.be.null;
        expect(data.message.gameEcosystem.image_url).to.be.an('string');
        expect(data.message.gameEcosystem.__v).to.not.be.null;
        expect(data.message.gameEcosystem.__v).to.be.an('number');
        expect(data.message.app).to.not.be.null;
        expect(data.message.app).to.be.an('object');
        expect(data.message.app.isValid).to.not.be.null;
        expect(data.message.app.isValid).to.be.false;
        expect(data.message.app.ownerAddress).to.not.be.null;
        expect(data.message.app.ownerAddress).to.be.an('string');
        expect(data.message.app.authorizedAddresses).to.not.be.null;
        expect(data.message.app.authorizedAddresses).to.be.an('array').that.not.is.empty;
        expect(data.message.app.authorizedAddresses.length).to.equal(2);
        expect(data.message.app.croupierAddress).to.not.be.null;
        expect(data.message.app.croupierAddress).to.be.an('string');
        expect(data.message.app.games).to.not.be.null;
        expect(data.message.app.games).to.be.an('array').that.is.empty;
        expect(data.message.app.listAdmins).to.not.be.null;
        expect(data.message.app.listAdmins).to.be.an('array').that.not.is.empty;
        expect(data.message.app.listAdmins.length).to.equal(1);
        expect(data.message.app.services).to.not.be.null;
        expect(data.message.app.services).to.be.an('array').that.not.is.empty;
        expect(data.message.app.services.length).to.equal(2);
        expect(data.message.app.users).to.not.be.null;
        expect(data.message.app.users).to.be.an('array').that.not.is.empty;
        expect(data.message.app.external_users).to.not.be.null;
        expect(data.message.app.external_users).to.be.an('array').that.not.is.empty;
        expect(data.message.app.withdraws).to.not.be.null;
        expect(data.message.app.withdraws).to.be.an('array').that.is.empty;
        expect(data.message.app.deposits).to.not.be.null;
        expect(data.message.app.deposits).to.be.an('array').that.not.is.empty;
        expect(data.message.app.licensesId).to.not.be.null;
        expect(data.message.app.licensesId).to.be.an('array').that.is.empty;
        expect(data.message.app.countriesAvailable).to.not.be.null;
        expect(data.message.app.countriesAvailable).to.be.an('array').that.is.empty;
        expect(data.message.app.isWithdrawing).to.not.be.null;
        expect(data.message.app.isWithdrawing).to.be.false;
        expect(data.message.app._id).to.not.be.null;
        expect(data.message.app._id).to.be.an('string');
        expect(data.message.app.wallet).to.not.be.null;
        expect(data.message.app.wallet).to.be.an('string');
        expect(data.message.app.name).to.not.be.null;
        expect(data.message.app.name).to.be.an('string');
        expect(data.message.app.affiliateSetup).to.not.be.null;
        expect(data.message.app.affiliateSetup).to.be.an('string');
        expect(data.message.app.customization).to.not.be.null;
        expect(data.message.app.customization).to.be.an('string');
        expect(data.message.app.integrations).to.not.be.null;
        expect(data.message.app.integrations).to.be.an('string');
        expect(data.message.app.description).to.not.be.null;
        expect(data.message.app.description).to.be.an('string');
        expect(data.message.app.__v).to.not.be.null;
        expect(data.message.app.__v).to.be.an('number');
        expect(data.message.app).to.have.property('bearerToken');
        expect(data.message.app.bearerToken).to.not.be.null;
        expect(data.message.app.bearerToken).to.be.an('string');
        expect(data.message.app.currencyTicker).to.not.be.null;
        expect(data.message.app.currencyTicker).to.be.an('string');
        expect(data.message.app.decimals).to.not.be.null;
        expect(data.message.app.decimals).to.be.an('number');
        expect(data.message.app.platformAddress).to.not.be.null;
        expect(data.message.app.platformAddress).to.be.an('string');
        expect(data.message.app.platformBlockchain).to.not.be.null;
        expect(data.message.app.platformBlockchain).to.be.an('string');
        expect(data.message.app.platformTokenAddress).to.not.be.null;
        expect(data.message.app.platformTokenAddress).to.be.an('string');
    },
    shouldGetAllAppGamesEuropeanRoulette(data,expect){
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message).to.not.be.null;
        expect(data.message).to.be.an('array');
        
    },
    shouldChangeGameTableLimitEuropeanRoulette(data,expect){
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message).to.not.be.null;
        expect(data.message).to.be.an('object');
        expect(data.message.resultSpace).to.not.be.null;
        expect(data.message.resultSpace).to.be.an('array').that.not.is.empty;
        expect(data.message.tableLimit).to.not.be.null;
        expect(data.message.tableLimit).to.be.an('number');
        expect(data.message.result).to.not.be.null;
        expect(data.message.result).to.be.an('array').that.is.empty;
        expect(data.message.bets).to.not.be.null;
        expect(data.message.bets).to.be.an('array').that.is.empty;
        expect(data.message.isClosed).to.not.be.null;
        expect(data.message.isClosed).to.be.false;
        expect(data.message._id).to.not.be.null;
        expect(data.message._id).to.be.an('string');
        expect(data.message.name).to.not.be.null;
        expect(data.message.name).to.be.an('string');
        expect(data.message.edge).to.not.be.null;
        expect(data.message.edge).to.be.an('number');
        expect(data.message.app).to.not.be.null;
        expect(data.message.app).to.be.an('string');
        expect(data.message.betSystem).to.not.be.null;
        expect(data.message.betSystem).to.be.an('number');
        expect(data.message.timestamp).to.not.be.null;
        expect(data.message.timestamp).to.be.an('string');
        expect(data.message.image_url).to.not.be.null;
        expect(data.message.image_url).to.be.an('string');
        expect(data.message.metaName).to.not.be.null;
        expect(data.message.metaName).to.be.an('string');
        expect(data.message.description).to.not.be.null;
        expect(data.message.description).to.be.an('string');
        expect(data.message.__v).to.not.be.null;
        expect(data.message.__v).to.be.an('number');
    },
    shouldChangeGameEdgeEuropeanRoulette(data,expect){
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message).to.not.be.null;
        expect(data.message).to.be.an('object');
        expect(data.message.resultSpace).to.not.be.null;
        expect(data.message.resultSpace).to.be.an('array').that.not.is.empty;
        expect(data.message.tableLimit).to.not.be.null;
        expect(data.message.tableLimit).to.be.an('number');
        expect(data.message.result).to.not.be.null;
        expect(data.message.result).to.be.an('array').that.is.empty;
        expect(data.message.bets).to.not.be.null;
        expect(data.message.bets).to.be.an('array').that.is.empty;
        expect(data.message.isClosed).to.not.be.null;
        expect(data.message.isClosed).to.be.false;
        expect(data.message._id).to.not.be.null;
        expect(data.message._id).to.be.an('string');
        expect(data.message.name).to.not.be.null;
        expect(data.message.name).to.be.an('string');
        expect(data.message.edge).to.not.be.null;
        expect(data.message.edge).to.be.an('number');
        expect(data.message.app).to.not.be.null;
        expect(data.message.app).to.be.an('string');
        expect(data.message.betSystem).to.not.be.null;
        expect(data.message.betSystem).to.be.an('number');
        expect(data.message.timestamp).to.not.be.null;
        expect(data.message.timestamp).to.be.an('string');
        expect(data.message.image_url).to.not.be.null;
        expect(data.message.image_url).to.be.an('string');
        expect(data.message.metaName).to.not.be.null;
        expect(data.message.metaName).to.be.an('string');
        expect(data.message.description).to.not.be.null;
        expect(data.message.description).to.be.an('string');
        expect(data.message.__v).to.not.be.null;
        expect(data.message.__v).to.be.an('number');
    },
    shouldGetAllEcosystemGamesCoinFlip(data,expect){
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message).to.not.be.null;
        expect(data.message).to.be.an('array');
    },
    shouldAddEcosystemGameCoinFlip(data,expect){
        expect(data.status).to.not.be.null;
        expect(data.status).to.equal(200);
        expect(data.message.gameEcosystem).to.not.be.null;
        expect(data.message.gameEcosystem).to.be.an('object');
        expect(data.message.gameEcosystem.resultSpace).to.not.be.null;
        expect(data.message.gameEcosystem.resultSpace).to.be.an('array');
        expect(data.message.gameEcosystem.isValid).to.not.be.null;
        expect(data.message.gameEcosystem.isValid).to.be.true;
        expect(data.message.gameEcosystem._id).to.not.be.null;
        expect(data.message.gameEcosystem._id).to.be.an('string');
        expect(data.message.gameEcosystem.name).to.not.be.null;
        expect(data.message.gameEcosystem.name).to.be.an('string');
        expect(data.message.gameEcosystem.metaName).to.not.be.null;
        expect(data.message.gameEcosystem.metaName).to.be.an('string');
        expect(data.message.gameEcosystem.description).to.not.be.null;
        expect(data.message.gameEcosystem.description).to.be.an('string');
        expect(data.message.gameEcosystem.image_url).to.not.be.null;
        expect(data.message.gameEcosystem.image_url).to.be.an('string');
        expect(data.message.gameEcosystem.__v).to.not.be.null;
        expect(data.message.gameEcosystem.__v).to.be.an('number');
        expect(data.message.app).to.not.be.null;
        expect(data.message.app).to.be.an('object');
        expect(data.message.app.isValid).to.not.be.null;
        expect(data.message.app.isValid).to.be.false;
        expect(data.message.app.ownerAddress).to.not.be.null;
        expect(data.message.app.ownerAddress).to.be.an('string');
        expect(data.message.app.authorizedAddresses).to.not.be.null;
        expect(data.message.app.authorizedAddresses).to.be.an('array').that.not.is.empty;
        expect(data.message.app.authorizedAddresses.length).to.equal(2);
        expect(data.message.app.croupierAddress).to.not.be.null;
        expect(data.message.app.croupierAddress).to.be.an('string');
        expect(data.message.app.games).to.not.be.null;
        expect(data.message.app.games).to.be.an('array').that.is.empty;
        expect(data.message.app.listAdmins).to.not.be.null;
        expect(data.message.app.listAdmins).to.be.an('array').that.not.is.empty;
        expect(data.message.app.listAdmins.length).to.equal(1);
        expect(data.message.app.services).to.not.be.null;
        expect(data.message.app.services).to.be.an('array').that.not.is.empty;
        expect(data.message.app.services.length).to.equal(2);
        expect(data.message.app.users).to.not.be.null;
        expect(data.message.app.users).to.be.an('array').that.not.is.empty;
        expect(data.message.app.external_users).to.not.be.null;
        expect(data.message.app.external_users).to.be.an('array').that.not.is.empty;
        expect(data.message.app.withdraws).to.not.be.null;
        expect(data.message.app.withdraws).to.be.an('array').that.is.empty;
        expect(data.message.app.deposits).to.not.be.null;
        expect(data.message.app.deposits).to.be.an('array').that.not.is.empty;
        expect(data.message.app.licensesId).to.not.be.null;
        expect(data.message.app.licensesId).to.be.an('array').that.is.empty;
        expect(data.message.app.countriesAvailable).to.not.be.null;
        expect(data.message.app.countriesAvailable).to.be.an('array').that.is.empty;
        expect(data.message.app.isWithdrawing).to.not.be.null;
        expect(data.message.app.isWithdrawing).to.be.false;
        expect(data.message.app._id).to.not.be.null;
        expect(data.message.app._id).to.be.an('string');
        expect(data.message.app.wallet).to.not.be.null;
        expect(data.message.app.wallet).to.be.an('string');
        expect(data.message.app.name).to.not.be.null;
        expect(data.message.app.name).to.be.an('string');
        expect(data.message.app.affiliateSetup).to.not.be.null;
        expect(data.message.app.affiliateSetup).to.be.an('string');
        expect(data.message.app.customization).to.not.be.null;
        expect(data.message.app.customization).to.be.an('string');
        expect(data.message.app.integrations).to.not.be.null;
        expect(data.message.app.integrations).to.be.an('string');
        expect(data.message.app.description).to.not.be.null;
        expect(data.message.app.description).to.be.an('string');
        expect(data.message.app.__v).to.not.be.null;
        expect(data.message.app.__v).to.be.an('number');
        expect(data.message.app).to.have.property('bearerToken');
        expect(data.message.app.bearerToken).to.not.be.null;
        expect(data.message.app.bearerToken).to.be.an('string');
        expect(data.message.app.currencyTicker).to.not.be.null;
        expect(data.message.app.currencyTicker).to.be.an('string');
        expect(data.message.app.decimals).to.not.be.null;
        expect(data.message.app.decimals).to.be.an('number');
        expect(data.message.app.platformAddress).to.not.be.null;
        expect(data.message.app.platformAddress).to.be.an('string');
        expect(data.message.app.platformBlockchain).to.not.be.null;
        expect(data.message.app.platformBlockchain).to.be.an('string');
        expect(data.message.app.platformTokenAddress).to.not.be.null;
        expect(data.message.app.platformTokenAddress).to.be.an('string');
    },
}